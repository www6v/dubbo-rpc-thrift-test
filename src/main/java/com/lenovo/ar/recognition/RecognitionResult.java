/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lenovo.ar.recognition;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RecognitionResult implements org.apache.thrift.TBase<RecognitionResult, RecognitionResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecognitionResult");

  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET2CAMERA_FIELD_DESC = new org.apache.thrift.protocol.TField("target2camera", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FEATURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("featureUrl", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecognitionResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecognitionResultTupleSchemeFactory());
  }

  public boolean success; // required
  public String tag; // required
  public List<Double> target2camera; // required
  public String featureUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUCCESS((short)1, "success"),
    TAG((short)2, "tag"),
    TARGET2CAMERA((short)3, "target2camera"),
    FEATURE_URL((short)4, "featureUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUCCESS
          return SUCCESS;
        case 2: // TAG
          return TAG;
        case 3: // TARGET2CAMERA
          return TARGET2CAMERA;
        case 4: // FEATURE_URL
          return FEATURE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET2CAMERA, new org.apache.thrift.meta_data.FieldMetaData("target2camera", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.FEATURE_URL, new org.apache.thrift.meta_data.FieldMetaData("featureUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecognitionResult.class, metaDataMap);
  }

  public RecognitionResult() {
  }

  public RecognitionResult(
    boolean success,
    String tag,
    List<Double> target2camera,
    String featureUrl)
  {
    this();
    this.success = success;
    setSuccessIsSet(true);
    this.tag = tag;
    this.target2camera = target2camera;
    this.featureUrl = featureUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecognitionResult(RecognitionResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.success = other.success;
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    if (other.isSetTarget2camera()) {
      List<Double> __this__target2camera = new ArrayList<Double>();
      for (Double other_element : other.target2camera) {
        __this__target2camera.add(other_element);
      }
      this.target2camera = __this__target2camera;
    }
    if (other.isSetFeatureUrl()) {
      this.featureUrl = other.featureUrl;
    }
  }

  public RecognitionResult deepCopy() {
    return new RecognitionResult(this);
  }

  @Override
  public void clear() {
    setSuccessIsSet(false);
    this.success = false;
    this.tag = null;
    this.target2camera = null;
    this.featureUrl = null;
  }

  public boolean isSuccess() {
    return this.success;
  }

  public RecognitionResult setSuccess(boolean success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
  }

  public String getTag() {
    return this.tag;
  }

  public RecognitionResult setTag(String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public int getTarget2cameraSize() {
    return (this.target2camera == null) ? 0 : this.target2camera.size();
  }

  public java.util.Iterator<Double> getTarget2cameraIterator() {
    return (this.target2camera == null) ? null : this.target2camera.iterator();
  }

  public void addToTarget2camera(double elem) {
    if (this.target2camera == null) {
      this.target2camera = new ArrayList<Double>();
    }
    this.target2camera.add(elem);
  }

  public List<Double> getTarget2camera() {
    return this.target2camera;
  }

  public RecognitionResult setTarget2camera(List<Double> target2camera) {
    this.target2camera = target2camera;
    return this;
  }

  public void unsetTarget2camera() {
    this.target2camera = null;
  }

  /** Returns true if field target2camera is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget2camera() {
    return this.target2camera != null;
  }

  public void setTarget2cameraIsSet(boolean value) {
    if (!value) {
      this.target2camera = null;
    }
  }

  public String getFeatureUrl() {
    return this.featureUrl;
  }

  public RecognitionResult setFeatureUrl(String featureUrl) {
    this.featureUrl = featureUrl;
    return this;
  }

  public void unsetFeatureUrl() {
    this.featureUrl = null;
  }

  /** Returns true if field featureUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureUrl() {
    return this.featureUrl != null;
  }

  public void setFeatureUrlIsSet(boolean value) {
    if (!value) {
      this.featureUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((Boolean)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((String)value);
      }
      break;

    case TARGET2CAMERA:
      if (value == null) {
        unsetTarget2camera();
      } else {
        setTarget2camera((List<Double>)value);
      }
      break;

    case FEATURE_URL:
      if (value == null) {
        unsetFeatureUrl();
      } else {
        setFeatureUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return Boolean.valueOf(isSuccess());

    case TAG:
      return getTag();

    case TARGET2CAMERA:
      return getTarget2camera();

    case FEATURE_URL:
      return getFeatureUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    case TAG:
      return isSetTag();
    case TARGET2CAMERA:
      return isSetTarget2camera();
    case FEATURE_URL:
      return isSetFeatureUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecognitionResult)
      return this.equals((RecognitionResult)that);
    return false;
  }

  public boolean equals(RecognitionResult that) {
    if (that == null)
      return false;

    boolean this_present_success = true;
    boolean that_present_success = true;
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_target2camera = true && this.isSetTarget2camera();
    boolean that_present_target2camera = true && that.isSetTarget2camera();
    if (this_present_target2camera || that_present_target2camera) {
      if (!(this_present_target2camera && that_present_target2camera))
        return false;
      if (!this.target2camera.equals(that.target2camera))
        return false;
    }

    boolean this_present_featureUrl = true && this.isSetFeatureUrl();
    boolean that_present_featureUrl = true && that.isSetFeatureUrl();
    if (this_present_featureUrl || that_present_featureUrl) {
      if (!(this_present_featureUrl && that_present_featureUrl))
        return false;
      if (!this.featureUrl.equals(that.featureUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RecognitionResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RecognitionResult typedOther = (RecognitionResult)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, typedOther.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget2camera()).compareTo(typedOther.isSetTarget2camera());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget2camera()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target2camera, typedOther.target2camera);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureUrl()).compareTo(typedOther.isSetFeatureUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureUrl, typedOther.featureUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecognitionResult(");
    boolean first = true;

    sb.append("success:");
    sb.append(this.success);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tag:");
    if (this.tag == null) {
      sb.append("null");
    } else {
      sb.append(this.tag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target2camera:");
    if (this.target2camera == null) {
      sb.append("null");
    } else {
      sb.append(this.target2camera);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureUrl:");
    if (this.featureUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.featureUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecognitionResultStandardSchemeFactory implements SchemeFactory {
    public RecognitionResultStandardScheme getScheme() {
      return new RecognitionResultStandardScheme();
    }
  }

  private static class RecognitionResultStandardScheme extends StandardScheme<RecognitionResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecognitionResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success = iprot.readBool();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET2CAMERA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.target2camera = new ArrayList<Double>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  double _elem10; // required
                  _elem10 = iprot.readDouble();
                  struct.target2camera.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setTarget2cameraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FEATURE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.featureUrl = iprot.readString();
              struct.setFeatureUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecognitionResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.success);
      oprot.writeFieldEnd();
      if (struct.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeString(struct.tag);
        oprot.writeFieldEnd();
      }
      if (struct.target2camera != null) {
        oprot.writeFieldBegin(TARGET2CAMERA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.target2camera.size()));
          for (double _iter11 : struct.target2camera)
          {
            oprot.writeDouble(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.featureUrl != null) {
        oprot.writeFieldBegin(FEATURE_URL_FIELD_DESC);
        oprot.writeString(struct.featureUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecognitionResultTupleSchemeFactory implements SchemeFactory {
    public RecognitionResultTupleScheme getScheme() {
      return new RecognitionResultTupleScheme();
    }
  }

  private static class RecognitionResultTupleScheme extends TupleScheme<RecognitionResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecognitionResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSuccess()) {
        optionals.set(0);
      }
      if (struct.isSetTag()) {
        optionals.set(1);
      }
      if (struct.isSetTarget2camera()) {
        optionals.set(2);
      }
      if (struct.isSetFeatureUrl()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSuccess()) {
        oprot.writeBool(struct.success);
      }
      if (struct.isSetTag()) {
        oprot.writeString(struct.tag);
      }
      if (struct.isSetTarget2camera()) {
        {
          oprot.writeI32(struct.target2camera.size());
          for (double _iter12 : struct.target2camera)
          {
            oprot.writeDouble(_iter12);
          }
        }
      }
      if (struct.isSetFeatureUrl()) {
        oprot.writeString(struct.featureUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecognitionResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.success = iprot.readBool();
        struct.setSuccessIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tag = iprot.readString();
        struct.setTagIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.target2camera = new ArrayList<Double>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            double _elem15; // required
            _elem15 = iprot.readDouble();
            struct.target2camera.add(_elem15);
          }
        }
        struct.setTarget2cameraIsSet(true);
      }
      if (incoming.get(3)) {
        struct.featureUrl = iprot.readString();
        struct.setFeatureUrlIsSet(true);
      }
    }
  }

}

