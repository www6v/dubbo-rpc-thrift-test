/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lenovo.ar.recognition;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RecognitionRequest implements org.apache.thrift.TBase<RecognitionRequest, RecognitionRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecognitionRequest");

  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RECOGNITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("recognitionType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CAMERA_PROJECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cameraProjection", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecognitionRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecognitionRequestTupleSchemeFactory());
  }

  public ByteBuffer data; // required
  public int width; // required
  public int height; // required
  public int recognitionType; // required
  public List<Double> cameraProjection; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA((short)1, "data"),
    WIDTH((short)2, "width"),
    HEIGHT((short)3, "height"),
    RECOGNITION_TYPE((short)4, "recognitionType"),
    CAMERA_PROJECTION((short)5, "cameraProjection");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA
          return DATA;
        case 2: // WIDTH
          return WIDTH;
        case 3: // HEIGHT
          return HEIGHT;
        case 4: // RECOGNITION_TYPE
          return RECOGNITION_TYPE;
        case 5: // CAMERA_PROJECTION
          return CAMERA_PROJECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WIDTH_ISSET_ID = 0;
  private static final int __HEIGHT_ISSET_ID = 1;
  private static final int __RECOGNITIONTYPE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOGNITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("recognitionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAMERA_PROJECTION, new org.apache.thrift.meta_data.FieldMetaData("cameraProjection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecognitionRequest.class, metaDataMap);
  }

  public RecognitionRequest() {
  }

  public RecognitionRequest(
    ByteBuffer data,
    int width,
    int height,
    int recognitionType,
    List<Double> cameraProjection)
  {
    this();
    this.data = data;
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.recognitionType = recognitionType;
    setRecognitionTypeIsSet(true);
    this.cameraProjection = cameraProjection;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecognitionRequest(RecognitionRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
;
    }
    this.width = other.width;
    this.height = other.height;
    this.recognitionType = other.recognitionType;
    if (other.isSetCameraProjection()) {
      List<Double> __this__cameraProjection = new ArrayList<Double>();
      for (Double other_element : other.cameraProjection) {
        __this__cameraProjection.add(other_element);
      }
      this.cameraProjection = __this__cameraProjection;
    }
  }

  public RecognitionRequest deepCopy() {
    return new RecognitionRequest(this);
  }

  @Override
  public void clear() {
    this.data = null;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    setRecognitionTypeIsSet(false);
    this.recognitionType = 0;
    this.cameraProjection = null;
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public ByteBuffer bufferForData() {
    return data;
  }

  public RecognitionRequest setData(byte[] data) {
    setData(data == null ? (ByteBuffer)null : ByteBuffer.wrap(data));
    return this;
  }

  public RecognitionRequest setData(ByteBuffer data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getWidth() {
    return this.width;
  }

  public RecognitionRequest setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bit_vector.clear(__WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return __isset_bit_vector.get(__WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bit_vector.set(__WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public RecognitionRequest setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bit_vector.clear(__HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return __isset_bit_vector.get(__HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bit_vector.set(__HEIGHT_ISSET_ID, value);
  }

  public int getRecognitionType() {
    return this.recognitionType;
  }

  public RecognitionRequest setRecognitionType(int recognitionType) {
    this.recognitionType = recognitionType;
    setRecognitionTypeIsSet(true);
    return this;
  }

  public void unsetRecognitionType() {
    __isset_bit_vector.clear(__RECOGNITIONTYPE_ISSET_ID);
  }

  /** Returns true if field recognitionType is set (has been assigned a value) and false otherwise */
  public boolean isSetRecognitionType() {
    return __isset_bit_vector.get(__RECOGNITIONTYPE_ISSET_ID);
  }

  public void setRecognitionTypeIsSet(boolean value) {
    __isset_bit_vector.set(__RECOGNITIONTYPE_ISSET_ID, value);
  }

  public int getCameraProjectionSize() {
    return (this.cameraProjection == null) ? 0 : this.cameraProjection.size();
  }

  public java.util.Iterator<Double> getCameraProjectionIterator() {
    return (this.cameraProjection == null) ? null : this.cameraProjection.iterator();
  }

  public void addToCameraProjection(double elem) {
    if (this.cameraProjection == null) {
      this.cameraProjection = new ArrayList<Double>();
    }
    this.cameraProjection.add(elem);
  }

  public List<Double> getCameraProjection() {
    return this.cameraProjection;
  }

  public RecognitionRequest setCameraProjection(List<Double> cameraProjection) {
    this.cameraProjection = cameraProjection;
    return this;
  }

  public void unsetCameraProjection() {
    this.cameraProjection = null;
  }

  /** Returns true if field cameraProjection is set (has been assigned a value) and false otherwise */
  public boolean isSetCameraProjection() {
    return this.cameraProjection != null;
  }

  public void setCameraProjectionIsSet(boolean value) {
    if (!value) {
      this.cameraProjection = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((ByteBuffer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case RECOGNITION_TYPE:
      if (value == null) {
        unsetRecognitionType();
      } else {
        setRecognitionType((Integer)value);
      }
      break;

    case CAMERA_PROJECTION:
      if (value == null) {
        unsetCameraProjection();
      } else {
        setCameraProjection((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA:
      return getData();

    case WIDTH:
      return Integer.valueOf(getWidth());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case RECOGNITION_TYPE:
      return Integer.valueOf(getRecognitionType());

    case CAMERA_PROJECTION:
      return getCameraProjection();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA:
      return isSetData();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case RECOGNITION_TYPE:
      return isSetRecognitionType();
    case CAMERA_PROJECTION:
      return isSetCameraProjection();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecognitionRequest)
      return this.equals((RecognitionRequest)that);
    return false;
  }

  public boolean equals(RecognitionRequest that) {
    if (that == null)
      return false;

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_recognitionType = true;
    boolean that_present_recognitionType = true;
    if (this_present_recognitionType || that_present_recognitionType) {
      if (!(this_present_recognitionType && that_present_recognitionType))
        return false;
      if (this.recognitionType != that.recognitionType)
        return false;
    }

    boolean this_present_cameraProjection = true && this.isSetCameraProjection();
    boolean that_present_cameraProjection = true && that.isSetCameraProjection();
    if (this_present_cameraProjection || that_present_cameraProjection) {
      if (!(this_present_cameraProjection && that_present_cameraProjection))
        return false;
      if (!this.cameraProjection.equals(that.cameraProjection))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RecognitionRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RecognitionRequest typedOther = (RecognitionRequest)other;

    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecognitionType()).compareTo(typedOther.isSetRecognitionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecognitionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recognitionType, typedOther.recognitionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCameraProjection()).compareTo(typedOther.isSetCameraProjection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCameraProjection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cameraProjection, typedOther.cameraProjection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecognitionRequest(");
    boolean first = true;

    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.data, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recognitionType:");
    sb.append(this.recognitionType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cameraProjection:");
    if (this.cameraProjection == null) {
      sb.append("null");
    } else {
      sb.append(this.cameraProjection);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecognitionRequestStandardSchemeFactory implements SchemeFactory {
    public RecognitionRequestStandardScheme getScheme() {
      return new RecognitionRequestStandardScheme();
    }
  }

  private static class RecognitionRequestStandardScheme extends StandardScheme<RecognitionRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecognitionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECOGNITION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recognitionType = iprot.readI32();
              struct.setRecognitionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAMERA_PROJECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.cameraProjection = new ArrayList<Double>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  double _elem2; // required
                  _elem2 = iprot.readDouble();
                  struct.cameraProjection.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setCameraProjectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecognitionRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECOGNITION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.recognitionType);
      oprot.writeFieldEnd();
      if (struct.cameraProjection != null) {
        oprot.writeFieldBegin(CAMERA_PROJECTION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.cameraProjection.size()));
          for (double _iter3 : struct.cameraProjection)
          {
            oprot.writeDouble(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecognitionRequestTupleSchemeFactory implements SchemeFactory {
    public RecognitionRequestTupleScheme getScheme() {
      return new RecognitionRequestTupleScheme();
    }
  }

  private static class RecognitionRequestTupleScheme extends TupleScheme<RecognitionRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecognitionRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetData()) {
        optionals.set(0);
      }
      if (struct.isSetWidth()) {
        optionals.set(1);
      }
      if (struct.isSetHeight()) {
        optionals.set(2);
      }
      if (struct.isSetRecognitionType()) {
        optionals.set(3);
      }
      if (struct.isSetCameraProjection()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetData()) {
        oprot.writeBinary(struct.data);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetRecognitionType()) {
        oprot.writeI32(struct.recognitionType);
      }
      if (struct.isSetCameraProjection()) {
        {
          oprot.writeI32(struct.cameraProjection.size());
          for (double _iter4 : struct.cameraProjection)
          {
            oprot.writeDouble(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecognitionRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recognitionType = iprot.readI32();
        struct.setRecognitionTypeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.cameraProjection = new ArrayList<Double>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            double _elem7; // required
            _elem7 = iprot.readDouble();
            struct.cameraProjection.add(_elem7);
          }
        }
        struct.setCameraProjectionIsSet(true);
      }
    }
  }

}

